set bg=light

filetype plugin indent on
set autochdir
set autoindent
set autoread
set backspace=indent,eol,start
set cmdheight=2
set display=lastline
set encoding=utf-8
set expandtab
set exrc
set ffs=unix,dos,mac
set fileencoding=utf-8
set fileencodings=utf-8
set guicursor=
set hidden
set hlsearch is
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set linebreak
set list
set nocompatible
set nowrap
set number
set regexpengine=1
set ruler
set shiftround
set shiftwidth=2
set shortmess+=c
set showcmd
set showmatch
set showmode
set smartcase
set smartindent
set smarttab
set softtabstop=0
set splitbelow
set splitright
set tabstop=4
set textwidth=100
set ttyfast
set updatetime=300
set wildmenu
" set wildmode=longest:list,full
set wildmode=list:longest
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx
set wrapscan

set mousemodel=popup
set t_Co=256
set guioptions=egmrti
set gfn=Monospace\ 10

set modeline
set modelines=10

set title
set titleold="Terminal"
set titlestring=%F

set path+=**
set wildignore+=**node_modules**
set wildignore+=**vendor**

if exists('$SHELL')
    set shell=$SHELL
else
    set shell=/bin/bash
endif

if has("syntax")
    syntax on
endif

if has('unnamedplus')
    set clipboard=unnamed,unnamedplus
endif

if has("patch-8.1.1564")
    set signcolumn=number
    " set signcolumn=yes
else
    set signcolumn=yes
endif

" statusline
if has("statusline")
    set statusline=
    " set statusline+=%#PmenuSel#
    set statusline+=%#LineNr#
    set statusline+=\ %M
    set statusline+=\ %r
    set statusline+=\ %F
    set statusline+=\ %m
    set statusline+=%=
    set statusline+=\ %y
    set statusline+=\ [%{&fileencoding?&fileencoding:&encoding}]
    set statusline+=\ [%{&fileformat}]
    set statusline+=\ %c:%l/%L
    set statusline+=\ %p%%
    set statusline+=\ [%n
    set statusline+=\/%{len(filter(range(1,bufnr('$')),'buflisted(v:val)'))}]
endif

map <F5> :source ~/.vimrc<CR>

" Lexplore
nnoremap <C-\> :Lex <bar> vertical resize 30<Cr>
let g:netrw_liststyle = 3 " mostra como uma tree
let g:netrw_banner = 0 " remove o topo
let g:netrw_list_hide = netrw_gitignore#Hide()
let g:netrw_list_hide .= '.*\.swp$,.*\.pyc,.*\.git,node_modules,tags' " exclui arquivos e diretorios
let g:netrw_list_hide .= ',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_altv = 1
let g:netrw_browse_split = 4

" leader key IS \
nnoremap <leader>n :bn<cr>
nnoremap <leader>p :bp<cr>
nnoremap <leader>sv :vsplit<cr>
nnoremap <leader>sh :split<cr>
nnoremap <leader>. :lcd %:p:h<CR>

execute "set <M-h>=\eh"
nnoremap <M-h> :vertical resize +2<cr>
execute "set <M-l>=\el"
nnoremap <M-l> :vertical resize -2<cr>

execute "set <M-j>=\ej"
nnoremap <M-j> :resize +2<cr>
execute "set <M-k>=\ek"
nnoremap <M-k> :resize -2<cr>

" ident
vmap < <gv
vmap > >gv

" move lines
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

if empty($TMUX)
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
else
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif

if has('multi_byte') && &encoding ==# 'utf-8'
    let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
    let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

"set listchars=tab:>~,nbsp:_,trail:.
set listchars=tab:→\ ,trail:·,precedes:«,extends:»

" c
autocmd FileType c setlocal tabstop=4 shiftwidth=4 expandtab
autocmd FileType cpp setlocal tabstop=4 shiftwidth=4 expandtab

" html
autocmd Filetype html setlocal ts=2 sw=2 expandtab

" javascript
let g:javascript_enable_domhtmlcss = 1
augroup vimrc-javascript
    autocmd!
    autocmd FileType javascript setl tabstop=2 | setl shiftwidth=2 | setl expandtab softtabstop=2

    " executa na abertura do arquivo uma sincronizacao da syntax do codigo
    " autocmd FileType javascript|vue %syntax sync fromstart
augroup END

" sql
augroup vimrc-sql
    autocmd!
    autocmd FileType *.sql setl tabstop=4 | setl shiftwidth=4 | setl expandtab softtabstop=4 | silent! %retab

    autocmd BufWritePre *.sql %s/\(\(\<group\>\|\<order\>\)\{-}\s\{-}\<by\>\|\(\<left\>\|\<inner\>\|\<outer\>\)\{-}\s\{-}\<join\>\|\<update\>\|\<or\>\|     \
                \<all\>\|\<analyze\>\|\<and\>\|\<any\>\|\<array\>\|\<as\>\|\<case\>\|\<create\>\|\<begin\>\|\<declare\>\|\<if\>\|\<delete\>\|\<end\>\|      \
                \<else\>\|\<exists\>\|\<explain\>\|\<from\>\|\<index\>\|\<is\>\|\<not\>\|\<null\>\|\<on\>\|\<select\>\|\<return\>\|\<set\>\|\<else\>\|      \
                \<some\>\|\<then\>\|\<union\>\|\<using\>\|\<when\>\|\<where\>\|\<with\>\|\<insert\>\|\<into\>\|\<begin\>\|\<function\>\|\<trigger\>\)/\U&/g
augroup END

" python
augroup vimrc-python
    autocmd!
    autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
                \ formatoptions+=croq softtabstop=4
                \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END

augroup vimrc-sync-fromstart
    autocmd!
    autocmd BufEnter * :syntax sync maxlines=200
augroup END

"" Remember cursor position
augroup vimrc-remember-cursor-position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

"" make/cmake
augroup vimrc-make-cmake
    autocmd!
    autocmd FileType make setlocal noexpandtab
    autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
augroup END

" Com fileype on
augroup PatchDiffHighlight
    autocmd!
    autocmd FileType diff syntax enable
augroup END

" deleta espaços e outros caracteres do arquivo
autocmd BufWritePre * %s/\s\+$//e
autocmd BufWritePre * %s/\t\+$//e
autocmd BufWritePre * %s/$//e
autocmd BufWritePre * %s///e
command! FixWhitespace :%s/\s\+$//e

highlight VertSplit cterm=NONE
" set fillchars+=vert:\

highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

command! MakeTags !ctags -R --exclude=vendor --exclude=node_modules .
nmap <silent> <C-j>t :!ctags -R --exclude=vendor --exclude=node_modules ./ --PHP-kinds=+cif-dvj --JavaScript-kinds=+fcmp-v<CR><Esc>:!clear<CR><CR>

" autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')
" autocmd BufEnter * sign define dummy
" autocmd BufRead,BufNewFile * setlocal signcolumn=yes
highlight clear SignColumn
highlight! link SignColumn LineNr
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" hi Visual term=reverse cterm=reverse guibg=Grey
" hi Visual cterm=NONE ctermbg=0 ctermfg=NONE guibg=Grey40
